// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserDB {
  id                String            @id @default(cuid())
  name              String            @unique
  password          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  lastVisitedAt     DateTime?
  createdActivities ActivityDB[]
  participations    ParticipationDB[]
  createdImages     ImageDB[]
  public            Boolean           @default(true)
  profileImage      ImageDB?          @relation(fields: [profileImageId], references: [id], name: "ProfileImage")
  profileImageId    String?           @unique
  selfDescription   String?
  follows           FollowDB[]        @relation(name: "UserFollows")
  isFollowing       FollowDB[]        @relation(name: "UserIsFollowing")
}

model ParticipationDB {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       UserDB     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  activity   ActivityDB @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String

  @@unique([userId, activityId])
}

model ActivityDB {
  id                String            @id @default(cuid())
  title             String?
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         UserDB            @relation(fields: [createdById], references: [id])
  createdById       String
  venueName         String?
  geoLocation       String?
  startsAt          DateTime?
  endsAt            DateTime?
  barrierFree       Boolean?
  public            Boolean?
  participations    ParticipationDB[]
  freeWifiAvailable Boolean?
  toilettsAvailable Boolean?
  hygienePolicy     String?
  kidsWelcome       Boolean?
  petsWelcome       Boolean?
  smokingAllowed    Boolean?
  image             ImageDB?          @relation(fields: [imageId], references: [id])
  imageId           String?           @unique
}

model ImageDB {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdBy       UserDB      @relation(fields: [createdById], references: [id])
  createdById     String
  activity        ActivityDB?
  user            UserDB?     @relation(name: "ProfileImage")
  uploadCompleted Boolean     @default(false)
}

model FollowDB {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  towards   UserDB   @relation(name: "UserFollows", fields: [towardsId], references: [id])
  towardsId String
  by        UserDB   @relation(name: "UserIsFollowing", fields: [byId], references: [id])
  byId      String
}
